<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:tx="http://www.springframework.org/schema/tx" xmlns:p="http://www.springframework.org/schema/p"
       xmlns:context="http://www.springframework.org/schema/context" xmlns:aop="http://www.springframework.org/schema/aop"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
  http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd
  http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx.xsd
  http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd">


  <context:component-scan base-package="com.enroy.demo.dao"/>
  <!-- 启动对@AspectJ（面向切面）注解的支持 -->
  <!--proxy-target-class属性，默认为false，表示使用jdk动态代理织入增强，
      当配为true时，表示使用CGLib动态代理技术织入增强。
      不过即使设置为false，如果目标类没有声明接口，则spring将自动使用CGLib动态代理。 -->
  <aop:aspectj-autoproxy proxy-target-class="true"/>

  <!-- dao -->
  <bean class="com.enroy.demo.dao.test.TestDaoImpl"/>
  <!--数据库相关配置-->
  <!--数据源配置-->
  <!-- 使用应用内的DBCP数据库连接池 -->
  <bean id="demo.dataSource" class="com.alibaba.druid.pool.DruidDataSource"
        destroy-method="close">
    <!--数据库基础配置 driverClassName可以不配，如果不配，druid将会根据url的配置自动配置-->
    <property name="driverClassName" value="${demo.dataSource.driverClassName:org.apache.derby.jdbc.AutoloadedDriver}"/>
    <property name="url" value="${demo.dataSource.url:jdbc:derby:c:/temp/auditdb;create=true}"/>
    <property name="username" value="${demo.dataSource.username:root}"/>
    <property name="password" value="${demo.dataSource.password:root}"/>
    <!--初始化时建立物理连接的个数。初始化发生在显示调用init方法，或者第一次getConnection时-->
    <property name="initialSize" value="${demo.dataSource.initialSize:0}"/>
    <!--最小连接池数量-->
    <property name="minIdle" value="${pluto-core.jdbc.minIdle:1}"/>
    <!--最大连接池数量-->
    <property name="maxActive" value="${demo.dataSource.maxActive:100}"/>
    <!-- 配置获取连接等待超时的时间 -->
    <property name="maxWait" value="${demo.dataSource.maxWait:-1}"/>
    <!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 -->
    <property name="timeBetweenEvictionRunsMillis" value="${demo.dataSource.timeBetweenEvictionRunsMillis:60000}"/>
    <!--用来检测连接是否有效的sql，要求是一个查询语句。如果validationQuery为null，testOnBorrow、testOnReturn、testWhileIdle都不会其作用。-->
    <property name="validationQuery" value="${demo.dataSource.validationQuery:select 1}"/>
    <!--建议配置为true，不影响性能，并且保证安全性。申请连接的时候检测，如果空闲时间大于timeBetweenEvictionRunsMillis，执行validationQuery检测连接是否有效。-->
    <property name="testWhileIdle" value="${demo.dataSource.testWhileIdle:true}"/>
    <!--申请连接时执行validationQuery检测连接是否有效，做了这个配置会降低性能。-->
    <property name="testOnBorrow" value="${demo.dataSource.testOnBorrow:false}"/>
    <!--归还连接时执行validationQuery检测连接是否有效，做了这个配置会降低性能。-->
    <property name="testOnReturn" value="${demo.dataSource.testOnReturn:false}"/>
    <!-- 打开PSCache，并且指定每个连接上PSCache的大小 -->
    <property name="poolPreparedStatements" value="${demo.dataSource.poolPreparedStatements:true}"/>
    <property name="maxPoolPreparedStatementPerConnectionSize" value="${demo.dataSource.maxPoolPreparedStatementPerConnectionSize:300}"/>
  </bean>


  <!-- 定义实体管理器工厂
         Jpa配置   LocalContainerEntityManagerFactoryBean这个选项Spring扮演了容器的角色。完全掌管JPA -->
  <bean id="entityManagerFactory" class="org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean">
    <!-- 指定数据源 -->
    <property name="dataSource" ref="demo.dataSource"/>
    <property name="persistenceXmlLocation" value="classpath:META-INF/demo.persistence.xml"/>
    <property name="persistenceUnitName" value="demo"/>
    <!-- 指定Entity实体类包路径 -->
    <!--  <property name="packagesToScan">
        <array>
          <value>com.enroy.demo.core</value>
        </array>
      </property>-->
    <property name="persistenceProvider">
      <bean class="org.hibernate.ejb.HibernatePersistence"/>
    </property>
    <!-- 指定Jpa持久化实现厂商类,这里以Hibernate为例 -->
    <property name="jpaVendorAdapter">
      <bean class="org.springframework.orm.jpa.vendor.HibernateJpaVendorAdapter">
        <property name="generateDdl" value="false"/>
        <property name="database" value="MYSQL"/>
        <property name="databasePlatform" value="org.hibernate.dialect.MySQL5InnoDBDialect"/>
        <property name="showSql" value="true"/>
      </bean>
    </property>
    <!--jpaProperties和jpaPropertyMap
        指定JPA属性；如Hibernate中指定是否显示SQL的“hibernate.show_sql”属性-->
    <property name="jpaProperties">
      <props>
        <prop key="hibernate.dialect">${demo-core.hibernate.dialect:}</prop>
        <prop key="hibernate.show_sql">${demo-core.hibernate.show_sql:true}</prop>
        <prop key="hibernate.hbm2ddl.auto">${demo-core.hibernate.hbm2ddl.auto:update}</prop>
        <prop key="hibernate.default_schema">${demo-core.hibernate.default_schema:demo}</prop>
        <!--  <prop key="hibernate.ejb.interceptor">com.hd123.cloud.multitenant.ds.sharding.hibernate.ShardingInterceptor
          </prop>-->
      </props>
    </property>
    <!--<property name="jpaPropertyMap">
      <map>
        <entry key="hibernate.query.substitutions" value="true 1, false 0"/>
        <entry key="hibernate.default_batch_fetch_size" value="16"/>
        <entry key="hibernate.max_fetch_depth" value="2"/>
        <entry key="hibernate.generate_statistics" value="true"/>
        <entry key="hibernate.bytecode.use_reflection_optimizer" value="true"/>
        <entry key="hibernate.cache.use_second_level_cache" value="false"/>
        <entry key="hibernate.cache.use_query_cache" value="false"/>
      </map>
    </property>-->
  </bean>

  <!--支持事务注解（@Transactional）-->
  <!--proxy-target-class属性值决定是基于接口的还是基于类的代理被创建。
      如果proxy-target-class 属性值被设置为true，那么基于类的代理将起作用（这时需要cglib库）。
      如果proxy-target-class属值被设置为false或者这个属性被省略，那么使用的JDK 基于接口的代理-->
  <!--transaction-manager属性默认为"transactionManager"可以省略-->
  <tx:annotation-driven proxy-target-class="true"/>
  <!-- 事务管理器：JPA -->
  <bean id="transactionManager" class="org.springframework.orm.jpa.JpaTransactionManager">
    <property name="entityManagerFactory" ref="entityManagerFactory"/>
    <!--如果你还希望将事务应用于简单JDBC操作（JDBC操作使用的datasource和EntityManagerFactory使用的dataSource必须相同）
        那么JpaTransactionManager必须装配一个JpaDialect的实现-->
    <property name="jpaDialect">
      <bean class="org.springframework.orm.jpa.vendor.HibernateJpaDialect"/>
    </property>
  </bean>


</beans>