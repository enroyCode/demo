<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:tx="http://www.springframework.org/schema/tx" xmlns:p="http://www.springframework.org/schema/p"
       xmlns:context="http://www.springframework.org/schema/context" xmlns:aop="http://www.springframework.org/schema/aop"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
  http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd
  http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx.xsd
  http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd">


  <context:component-scan base-package="com.enroy.demo.dao"/>
  <!-- 启动对@AspectJ（面向切面）注解的支持 -->
  <aop:aspectj-autoproxy proxy-target-class="true"/>


  <!--<tx:annotation-driven transaction-manager="transactionManager" proxy-target-class="true"/>-->
  <!-- dao -->

  <!-- 定义实体管理器工厂
         Jpa配置   LocalContainerEntityManagerFactoryBean这个选项Spring扮演了容器的角色。完全掌管JPA -->
  <bean id="entityManagerFactory" class="org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean">
    <!-- 指定数据源 -->
    <property name="dataSource" ref="demo.dataSource"/>
    <!-- 指定Entity实体类包路径 -->
    <property name="packagesToScan">
      <array>
        <value>com.enroy.demo.core</value>
      </array>
    </property>
    <property name="persistenceProvider">
      <bean class="org.hibernate.ejb.HibernatePersistence"/>
    </property>
    <!-- 指定Jpa持久化实现厂商类,这里以Hibernate为例 -->
    <property name="jpaVendorAdapter">
      <bean class="org.springframework.orm.jpa.vendor.HibernateJpaVendorAdapter">
        <property name="generateDdl" value="false"/>
        <property name="database" value="MYSQL"/>
        <property name="databasePlatform" value="org.hibernate.dialect.MySQL5InnoDBDialect"/>
        <property name="showSql" value="true"/>
      </bean>
    </property>
    <property name="jpaDialect">
      <bean class="org.springframework.orm.jpa.vendor.HibernateJpaDialect"/>
    </property>
    <property name="jpaPropertyMap">
      <map>
        <entry key="hibernate.query.substitutions" value="true 1, false 0"/>
        <entry key="hibernate.default_batch_fetch_size" value="16"/>
        <entry key="hibernate.max_fetch_depth" value="2"/>
        <entry key="hibernate.generate_statistics" value="true"/>
        <entry key="hibernate.bytecode.use_reflection_optimizer" value="true"/>
        <entry key="hibernate.cache.use_second_level_cache" value="false"/>
        <entry key="hibernate.cache.use_query_cache" value="false"/>
      </map>
    </property>
  </bean>


  <!-- 事务管理器 -->
  <!--<bean id="transactionManager" class="org.springframework.orm.jpa.JpaTransactionManager">-->
  <!--<property name="entityManagerFactory" ref="entityManagerFactory"/>-->
  <!--</bean>-->
  <!--数据源配置-->
  <!-- 使用应用内的DBCP数据库连接池 -->
  <bean id="demo.dataSource" class="com.alibaba.druid.pool.DruidDataSource"
        destroy-method="close">
    <!--数据库基础配置 driverClassName可以不配，如果不配，druid将会根据url的配置自动配置-->
    <property name="driverClassName" value="${demo.dataSource.driverClassName:org.apache.derby.jdbc.AutoloadedDriver}"/>
    <property name="url" value="${demo.dataSource.url:jdbc:derby:c:/temp/auditdb;create=true}"/>
    <property name="username" value="${demo.dataSource.username:root}"/>
    <property name="password" value="${demo.dataSource.password:root}"/>
    <!--初始化时建立物理连接的个数。初始化发生在显示调用init方法，或者第一次getConnection时-->
    <property name="initialSize" value="${demo.dataSource.initialSize:0}"/>
    <!--最小连接池数量-->
    <property name="minIdle" value="${pluto-core.jdbc.minIdle:1}"/>
    <!--最大连接池数量-->
    <property name="maxActive" value="${demo.dataSource.maxActive:100}"/>
    <!-- 配置获取连接等待超时的时间 -->
    <property name="maxWait" value="${demo.dataSource.maxWait:-1}"/>
    <!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 -->
    <property name="timeBetweenEvictionRunsMillis" value="${demo.dataSource.timeBetweenEvictionRunsMillis:60000}"/>
    <!--用来检测连接是否有效的sql，要求是一个查询语句。如果validationQuery为null，testOnBorrow、testOnReturn、testWhileIdle都不会其作用。-->
    <property name="validationQuery" value="${demo.dataSource.validationQuery:select 1}"/>
    <!--建议配置为true，不影响性能，并且保证安全性。申请连接的时候检测，如果空闲时间大于timeBetweenEvictionRunsMillis，执行validationQuery检测连接是否有效。-->
    <property name="testWhileIdle" value="${demo.dataSource.testWhileIdle:true}"/>
    <!--申请连接时执行validationQuery检测连接是否有效，做了这个配置会降低性能。-->
    <property name="testOnBorrow" value="${demo.dataSource.testOnBorrow:false}"/>
    <!--归还连接时执行validationQuery检测连接是否有效，做了这个配置会降低性能。-->
    <property name="testOnReturn" value="${demo.dataSource.testOnReturn:false}"/>

    <!-- 打开PSCache，并且指定每个连接上PSCache的大小 -->
    <property name="poolPreparedStatements" value="${demo.dataSource.poolPreparedStatements:true}"/>
    <property name="maxPoolPreparedStatementPerConnectionSize" value="${demo.dataSource.maxPoolPreparedStatementPerConnectionSize:300}"/>
  </bean>


  <!--p:driverClassName="${demo.dataSource.driverClassName:org.apache.derby.jdbc.AutoloadedDriver}"-->
  <!--p:url="${demo.dataSource.url:jdbc:derby:c:/temp/auditdb;create=true}"-->
  <!--p:username="${demo.dataSource.username:root}"-->
  <!--p:password="${demo.dataSource.password:root}"-->
  <!--p:initialSize="${demo.dataSource.initialSize:0}"-->
  <!--p:maxActive="${demo.dataSource.maxActive:50}"-->
  <!--p:maxWait="${demo.dataSource.maxWait:-1}"-->
  <!--p:validationQuery="${demo.dataSource.validationQuery:}"-->
  <!--p:filters="stat"-->
  <!--p:poolPreparedStatements="${demo.dataSource.poolPreparedStatements:true}"-->
  <!--p:maxOpenPreparedStatements="${demo.dataSource.maxOpenPreparedStatements:20}"-->

  <!-- 事务 -->
  <!--<tx:advice id="txAdvice" transaction-manager="transactionManager">-->
  <!--<tx:attributes>-->
  <!--<tx:method name="*"/>-->
  <!--<tx:method name="get*" read-only="true"/>-->
  <!--<tx:method name="find*" read-only="true"/>-->
  <!--<tx:method name="select*" read-only="true"/>-->
  <!--<tx:method name="delete*" propagation="REQUIRED"/>-->
  <!--<tx:method name="update*" propagation="REQUIRED"/>-->
  <!--<tx:method name="add*" propagation="REQUIRED"/>-->
  <!--<tx:method name="insert*" propagation="REQUIRED"/>-->
  <!--</tx:attributes>-->
  <!--</tx:advice>-->

  <!--&lt;!&ndash; 事务入口 &ndash;&gt;-->
  <!--<aop:config>-->
  <!--<aop:pointcut id="allServiceMethod" expression="execution(* com.enroy.demo.dao..*(..))"/>-->
  <!--<aop:advisor pointcut-ref="allServiceMethod" advice-ref="txAdvice"/>-->
  <!--</aop:config>-->
</beans>